// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftGrid.EntityFrameworkCore;

#nullable disable

namespace SoftGrid.Migrations
{
    [DbContext(typeof(SoftGridDbContext))]
    [Migration("20230510140028_states full text index added")]
    partial class statesfulltextindexadded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Edition");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Exception")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ExceptionMessage")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ReturnValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGranted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserLinkId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ProviderKey", "TenantId")
                        .IsUnique()
                        .HasFilter("[TenantId] IS NOT NULL");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Result")
                        .HasColumnType("tinyint");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAbandoned")
                        .HasColumnType("bit");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Priority")
                        .HasColumnType("tinyint");

                    b.Property<short>("TryCount")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name", "UserId")
                        .IsUnique();

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityFullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.HasIndex("EntityFullName", "DynamicPropertyId", "TenantId")
                        .IsUnique()
                        .HasFilter("[EntityFullName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpDynamicEntityProperties");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DynamicEntityPropertyId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicEntityPropertyId");

                    b.ToTable("AbpDynamicEntityPropertyValues");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyName", "TenantId")
                        .IsUnique()
                        .HasFilter("[PropertyName] IS NOT NULL AND [TenantId] IS NOT NULL");

                    b.ToTable("AbpDynamicProperties");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DynamicPropertyId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DynamicPropertyId");

                    b.ToTable("AbpDynamicPropertyValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint");

                    b.Property<long>("EntityChangeSetId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48)
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("nvarchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtensionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImpersonatorTenantId")
                        .HasColumnType("int");

                    b.Property<long?>("ImpersonatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EntityChangeId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NewValueHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("OriginalValueHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192)
                        .HasColumnType("nvarchar(192)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.IdentityServer4vNext.PersistedGrantEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("AbpPersistedGrants", (string)null);
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96)
                        .HasColumnType("nvarchar(96)");

                    b.Property<byte>("Severity")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TargetNotifiers")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("TenantNotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("nvarchar(95)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnitRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganizationUnitId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "RoleId");

                    b.ToTable("AbpOrganizationUnitRoles");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookEvents");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<Guid>("WebhookEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WebhookSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WebhookEventId");

                    b.ToTable("AbpWebhookSendAttempts");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Headers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WebhookUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Webhooks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbpWebhookSubscriptions");
                });

            modelBuilder.Entity("SoftGrid.Authorization.Delegation.UserDelegation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourceUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "SourceUserId");

                    b.HasIndex("TenantId", "TargetUserId");

                    b.ToTable("AppUserDelegations");
                });

            modelBuilder.Entity("SoftGrid.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("SoftGrid.Authorization.Users.RecentPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AppRecentPasswords");
                });

            modelBuilder.Entity("SoftGrid.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328)
                        .HasColumnType("nvarchar(328)");

                    b.Property<string>("GoogleAuthenticatorKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328)
                        .HasColumnType("nvarchar(328)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<long?>("PrimaryHubId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RecoveryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("ShouldChangePasswordOnNextLogin")
                        .HasColumnType("bit");

                    b.Property<string>("SignInToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SignInTokenExpireTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("PrimaryHubId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("SoftGrid.CRM.Business", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address1")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Address2")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EinTaxId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(2056)
                        .HasColumnType("nvarchar(2056)");

                    b.Property<string>("Industry")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("InternalRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("LocationTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("LogoMediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TradeName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("Website")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YearOfEstablishment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("LogoMediaLibraryId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessAccountTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TenantId");

                    b.ToTable("BusinessAccountTeams");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessContactMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ContactId");

                    b.HasIndex("TenantId");

                    b.ToTable("BusinessContactMaps");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessJobMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("JobId");

                    b.HasIndex("TenantId");

                    b.ToTable("BusinessJobMaps");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("TenantId");

                    b.ToTable("BusinessNotes");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessProductMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("BusinessProductMaps");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessStoreMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("BusinessStoreMaps");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("TagValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("TenantId");

                    b.ToTable("BusinessTags");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessTaskMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskEventId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("TaskEventId");

                    b.HasIndex("TenantId");

                    b.ToTable("BusinessTaskMaps");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("BusinessUsers");
                });

            modelBuilder.Entity("SoftGrid.CRM.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("AiDataTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusinessEmail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("IsApplicant")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("MembershipTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Referred")
                        .HasColumnType("bit");

                    b.Property<long?>("ReferredByUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("ReferredByUserId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("SoftGrid.CRM.ContactTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("TagValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("TenantId");

                    b.ToTable("ContactTags");
                });

            modelBuilder.Entity("SoftGrid.CRM.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("BusinessEmail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CurrentEmployee")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Profile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SoftGrid.CRM.EmployeeTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("TagValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("TenantId");

                    b.ToTable("EmployeeTags");
                });

            modelBuilder.Entity("SoftGrid.Chat.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReadState")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverReadState")
                        .HasColumnType("int");

                    b.Property<Guid?>("SharedMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Side")
                        .HasColumnType("int");

                    b.Property<int?>("TargetTenantId")
                        .HasColumnType("int");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TargetTenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TargetTenantId", "UserId", "ReadState");

                    b.HasIndex("TenantId", "TargetUserId", "ReadState");

                    b.HasIndex("TenantId", "UserId", "ReadState");

                    b.ToTable("AppChatMessages");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.CustomerWallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("BalanceAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("BalanceDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("WalletOpeningDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerWallets");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.DiscountCodeByCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiscountCodeGeneratorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DiscountCodeGeneratorId");

                    b.HasIndex("TenantId");

                    b.ToTable("DiscountCodeByCustomers");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.DiscountCodeGenerator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouponCode")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("PercentageOrFixedAmount")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DiscountCodeGenerators");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.DiscountCodeMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiscountCodeGeneratorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MembershipTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountCodeGeneratorId");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("DiscountCodeMaps");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.DiscountCodeUserHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Amount")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DiscountCodeGeneratorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("DiscountCodeGeneratorId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TenantId");

                    b.ToTable("DiscountCodeUserHistories");
                });

            modelBuilder.Entity("SoftGrid.Friendships.Friendship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FriendProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FriendTenancyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FriendTenantId")
                        .HasColumnType("int");

                    b.Property<long>("FriendUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("FriendUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FriendTenantId", "FriendUserId");

                    b.HasIndex("FriendTenantId", "UserId");

                    b.HasIndex("TenantId", "FriendUserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AppFriendships");
                });

            modelBuilder.Entity("SoftGrid.JobManagement.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CityLocation")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FullTimeJobOrGigWorkProject")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("HireByDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalJobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobLocationFullAddress")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<long?>("JobStatusTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaximumExperience")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("MinimumExperience")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("NumberOfJobs")
                        .HasColumnType("int");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("ReferralPoints")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("RemoteWorkOrOnSiteWork")
                        .HasColumnType("bit");

                    b.Property<bool>("SalaryBasedOrFixedPrice")
                        .HasColumnType("bit");

                    b.Property<string>("SalaryOrStaffingRate")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Template")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("JobStatusTypeId");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StateId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("SoftGrid.JobManagement.JobStatusType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("JobStatusTypes");
                });

            modelBuilder.Entity("SoftGrid.JobManagement.JobTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("TagValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("TenantId");

                    b.ToTable("JobTags");
                });

            modelBuilder.Entity("SoftGrid.LookupData.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SoftGrid.LookupData.ConnectChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ConnectChannels");
                });

            modelBuilder.Entity("SoftGrid.LookupData.ContractType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FlagIcon")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Ticker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SoftGrid.LookupData.County", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("SoftGrid.LookupData.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Ticker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("SoftGrid.LookupData.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.EmailTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("SoftGrid.LookupData.HubType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("HubTypes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.MasterTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("PictureMediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Synonyms")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("PictureMediaLibraryId")
                        .IsUnique()
                        .HasFilter("[PictureMediaLibraryId] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("MasterTags");
                });

            modelBuilder.Entity("SoftGrid.LookupData.MasterTagCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("PictureMediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PictureMediaLibraryId")
                        .IsUnique()
                        .HasFilter("[PictureMediaLibraryId] IS NOT NULL");

                    b.HasIndex("TenantId");

                    b.ToTable("MasterTagCategories");
                });

            modelBuilder.Entity("SoftGrid.LookupData.MeasurementUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("SoftGrid.LookupData.MediaLibrary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AltTag")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("BinaryObjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Dimension")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("FileExtension")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SeoTag")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Size")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("VideoLink")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("VirtualPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("TenantId");

                    b.ToTable("MediaLibraries");
                });

            modelBuilder.Entity("SoftGrid.LookupData.MembershipType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("MembershipTypes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.PaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.ProductWholeSaleQuantityType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("MaxQty")
                        .HasColumnType("int");

                    b.Property<int?>("MinQty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductWholeSaleQuantityTypes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.RatingLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("IconLink")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("RatingLikes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.ReturnStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ReturnStatuses");
                });

            modelBuilder.Entity("SoftGrid.LookupData.ReturnType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("ReturnTypes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.SmsTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SmsTemplates");
                });

            modelBuilder.Entity("SoftGrid.LookupData.SocialMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("SoftGrid.LookupData.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Ticker")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("TenantId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("SoftGrid.LookupData.SubscriptionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SubscriptionTypes");
                });

            modelBuilder.Entity("SoftGrid.LookupData.ZipCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AreaCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AsianPopulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AverageHouseValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlackPopulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBSA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBSA_Div")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBSA_Div_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBSA_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBSA_Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CSA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CSAName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarrierRouteRateSortation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityAliasCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityAliasMixedCase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityAliasName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityDeliveryIndicator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CityMixedCase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityStateKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountyANSI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountyFIPS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CountyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CountyMixedCase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DayLightSaving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Division")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Elevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FemalePopulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinanceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HawaiianPopulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HispanicPopulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseholdsPerZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncomePerHousehold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndianPopulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MSA_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MalePopulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MultiCounty")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OtherPopulation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMSA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PMSA_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonsPerHousehold")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Population")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredLastLineKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryRecord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateANSI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateFIPS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueZIPName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhitePopulation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.ToTable("ZipCodes");
                });

            modelBuilder.Entity("SoftGrid.MultiTenancy.Accounting.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantLegalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TenantTaxNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppInvoices");
                });

            modelBuilder.Entity("SoftGrid.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.Property<int>("EditionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("ErrorUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalPaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gateway")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PaymentPeriodType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SuccessUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.HasIndex("ExternalPaymentId", "Gateway");

                    b.HasIndex("Status", "CreationTime");

                    b.ToTable("AppSubscriptionPayments");
                });

            modelBuilder.Entity("SoftGrid.MultiTenancy.Payments.SubscriptionPaymentExtensionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("SubscriptionPaymentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPaymentId", "Key", "IsDeleted")
                        .IsUnique()
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("AppSubscriptionPaymentsExtensionData");
                });

            modelBuilder.Entity("SoftGrid.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("CustomCssId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DarkLogoFileType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("DarkLogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInTrialPeriod")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LightLogoFileType")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid?>("LightLogoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("SubscriptionEndDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionPaymentType")
                        .HasColumnType("int");

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreationTime");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("SubscriptionEndDateUtc");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryAddress")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<double?>("DeliveryFee")
                        .HasColumnType("float");

                    b.Property<bool>("DeliveryOrPickup")
                        .HasColumnType("bit");

                    b.Property<double?>("DiscountAmountByCode")
                        .HasColumnType("float");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double?>("GratuityAmount")
                        .HasColumnType("float");

                    b.Property<double?>("GratuityPercentage")
                        .HasColumnType("float");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderSalesChannelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderStatusId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PaymentCompleted")
                        .HasColumnType("bit");

                    b.Property<double?>("ServiceCharge")
                        .HasColumnType("float");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<double?>("SubTotalExcludedTax")
                        .HasColumnType("float");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("TotalTaxAmount")
                        .HasColumnType("float");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderSalesChannelId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("StateId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderDeliveryInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CateringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CateringTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CustomerAcknowledged")
                        .HasColumnType("bit");

                    b.Property<string>("CustomerSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliverToCustomerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliverToCustomerTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryProviderId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("DeliveryTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DineInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DineInTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DispatchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DispatchTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IncludedChildren")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAsap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPickupCatering")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PickupDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PickupTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<double?>("TotalWeight")
                        .HasColumnType("float");

                    b.Property<string>("TrackingNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TenantId");

                    b.ToTable("OrderDeliveryInfos");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderFulfillmentStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ActualTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EstimatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderStatusId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("TenantId");

                    b.ToTable("OrderFulfillmentStatuses");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderPaymentInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorizationTransactionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorizationTransactionNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthrorizationTransactionResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingAddress")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("BillingCity")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("BillingState")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("BillingZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardCvv")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardExpirationMonth")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CardExpirationYear")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CardName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerDeviceInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DueAmount")
                        .HasColumnType("float");

                    b.Property<string>("MaskedCreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaidTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("PaySplitAmount")
                        .HasColumnType("float");

                    b.Property<bool>("PaymentSplit")
                        .HasColumnType("bit");

                    b.Property<long?>("PaymentTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("SaveCreditCardNumber")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("OrderPaymentInfos");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderProductInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("ByProductDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("ByProductDiscountPercentage")
                        .HasColumnType("float");

                    b.Property<double?>("ByProductTaxAmount")
                        .HasColumnType("float");

                    b.Property<double?>("ByProductTotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("OrderProductInfos");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderProductVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderProductInfoId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<long?>("ProductVariantCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductVariantId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantCategoryId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("TenantId");

                    b.ToTable("OrderProductVariants");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderSalesChannel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApiLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("OrderSalesChannels");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("DeliveryOrPickup")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("SequenceNo")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TenantId");

                    b.ToTable("OrderTeams");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderfulfillmentTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OrderId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderfulfillmentTeams");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.Lead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<string>("Company")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpectedClosingDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ExpectedSalesAmount")
                        .HasColumnType("float");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long?>("HubId")
                        .HasColumnType("bigint");

                    b.Property<string>("Industry")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("LeadPipelineStageId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LeadScore")
                        .HasColumnType("int");

                    b.Property<long?>("LeadSourceId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("HubId");

                    b.HasIndex("LeadPipelineStageId");

                    b.HasIndex("LeadSourceId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("InfluenceScore")
                        .HasColumnType("int");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("LeadId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadContacts");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadNotes");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadPipelineStage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("StageOrder")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadPipelineStages");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadPipelineStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EnteredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExitDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeadPipelineStageId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeadId");

                    b.HasIndex("LeadPipelineStageId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadPipelineStatuses");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadReferralReward", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("RewardAmount")
                        .HasColumnType("float");

                    b.Property<bool>("RewardStatus")
                        .HasColumnType("bit");

                    b.Property<string>("RewardType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("LeadId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadReferralRewards");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadSalesTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeadId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadSalesTeams");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadSources");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<string>("TagValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadTags");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("LeadId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskEventId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("TaskEventId");

                    b.HasIndex("TenantId");

                    b.ToTable("LeadTasks");
                });

            modelBuilder.Entity("SoftGrid.Shop.MarketplaceCommissionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<double?>("FixedAmount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("MarketplaceCommissionTypes");
                });

            modelBuilder.Entity("SoftGrid.Shop.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("ByOrderOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("CallForPrice")
                        .HasColumnType("bit");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDisplayStockQuantity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPackageProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWholeSaleProduct")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MeasurementAmount")
                        .HasColumnType("int");

                    b.Property<long?>("MeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<double?>("PriceDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("PriceDiscountPercentage")
                        .HasColumnType("float");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductManufacturerSku")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("RatingLikeId")
                        .HasColumnType("bigint");

                    b.Property<double?>("RegularPrice")
                        .HasColumnType("float");

                    b.Property<double?>("SalePrice")
                        .HasColumnType("float");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<string>("SeoTitle")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sku")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<string>("Url")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("MediaLibraryId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("RatingLikeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductAccountTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductAccountTeams");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductAndGiftCardMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<double?>("GiftAmount")
                        .HasColumnType("float");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<double?>("PurchaseAmount")
                        .HasColumnType("float");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductAndGiftCardMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductByVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long?>("MediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductVariantCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductVariantId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaLibraryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantCategoryId");

                    b.HasIndex("ProductVariantId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductByVariants");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<bool>("HasParentCategory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ProductOrService")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("MediaLibraryId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCategoryMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductCategoryMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCategoryTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductCategoryTeams");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCategoryVariantMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductVariantCategoryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductVariantCategoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductCategoryVariantMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCrossSellProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CrossProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CrossSellScore")
                        .HasColumnType("int");

                    b.Property<long>("PrimaryProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductCrossSellProducts");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCustomerQuery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnswerDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnswerTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductCustomerQueries");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCustomerStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AppOrWeb")
                        .HasColumnType("bit");

                    b.Property<bool>("Clicked")
                        .HasColumnType("bit");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("HubId")
                        .HasColumnType("bigint");

                    b.Property<string>("PageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Purchased")
                        .HasColumnType("bit");

                    b.Property<int?>("PurchasedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("QuitFromLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Shared")
                        .HasColumnType("bit");

                    b.Property<long?>("SocialMediaId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("WishedOrFavorite")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("HubId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductCustomerStats");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductFaq", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("Template")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductFaqs");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductFlashSaleProductMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FlashSalePrice")
                        .HasColumnType("float");

                    b.Property<long?>("MembershipTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MembershipTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductFlashSaleProductMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long?>("MediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaLibraryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductMedias");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductNotes");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductOwnerPublicContactInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<string>("ShortBio")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductOwnerPublicContactInfos");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductPackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long?>("MediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PackageProductId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<long>("PrimaryProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaLibraryId");

                    b.HasIndex("PrimaryProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductPackages");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductReturnInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdminNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReturnStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReturnTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReturnStatusId");

                    b.HasIndex("ReturnTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductReturnInfos");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<long?>("RatingLikeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReviewInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RatingLikeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductReviewFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductReviewId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<long?>("RatingLikeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReplyText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ProductReviewId");

                    b.HasIndex("RatingLikeId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductReviewFeedbacks");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductSubscriptionMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<double?>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("DiscountPercentage")
                        .HasColumnType("float");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubscriptionTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SubscriptionTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductSubscriptionMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("TagValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreOwnerTeamId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreOwnerTeamId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductTeams");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductUpsellRelatedProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long>("PrimaryProductId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelatedProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductUpsellRelatedProducts");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("ProductVariantCategoryId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantCategoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductVariantCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductVariantCategories");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductWholeSalePrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<double?>("ExactQuantity")
                        .HasColumnType("float");

                    b.Property<long?>("MeasurementUnitId")
                        .HasColumnType("bigint");

                    b.Property<string>("PackageInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PackageQuantity")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductWholeSaleQuantityTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("WholeSaleSkuId")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductWholeSaleQuantityTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("ProductWholeSalePrices");
                });

            modelBuilder.Entity("SoftGrid.Shop.ShoppingCart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<double?>("UnitDiscountAmount")
                        .HasColumnType("float");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.Property<double?>("UnitTotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("SoftGrid.Shop.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocalOrOnlineStore")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LegalName")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<long?>("LogoMediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTag")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("RatingLikeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Score")
                        .HasColumnType("int");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("StoreUrl")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Website")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("YearOfEstablishment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Youtube")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LogoMediaLibraryId");

                    b.HasIndex("RatingLikeId");

                    b.HasIndex("StateId");

                    b.HasIndex("StoreCategoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreAccountTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("OrderEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("OrderSmsNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreAccountTeams");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreBankAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("AccountNo")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("BankAddress")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("BankName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoutingNo")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreBankAccounts");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreBusinessCustomerMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<double?>("LifeTimeSalesAmount")
                        .HasColumnType("float");

                    b.Property<bool>("PaidCustomer")
                        .HasColumnType("bit");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreBusinessCustomerMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreBusinessHour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FridayEndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FridayStartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcceptOnlyBusinessHour")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen24Hours")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<string>("MondayEndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MondayStartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("NowOpenOrClosed")
                        .HasColumnType("bit");

                    b.Property<string>("SaturdayEndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SaturdayStartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("SundayEndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SundayStartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("ThursdayEndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ThursdayStartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TuesdayEndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TuesdayStartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WednesdayEndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WednesdayStartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreBusinessHours");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreContactMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<double?>("LifeTimeSalesAmount")
                        .HasColumnType("float");

                    b.Property<bool>("PaidCustomer")
                        .HasColumnType("bit");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreContactMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FullAddress")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreLocations");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreMarketplaceCommissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FixedAmount")
                        .HasColumnType("float");

                    b.Property<long?>("MarketplaceCommissionTypeId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketplaceCommissionTypeId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreMarketplaceCommissionSettings");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("MediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaLibraryId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreMedias");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreNotes");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreOwnerTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("OrderEmailNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("OrderSmsNotification")
                        .HasColumnType("bit");

                    b.Property<bool>("Primary")
                        .HasColumnType("bit");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreOwnerTeams");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreProductCategoryMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreProductCategoryMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreProductMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreProductMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreRelevantStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PrimaryStoreId")
                        .HasColumnType("bigint");

                    b.Property<long>("RelevantStoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryStoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreRelevantStores");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("RatingLikeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReviewInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("RatingLikeId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreReviews");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreReviewFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<long?>("RatingLikeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReplyText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoreReviewId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("RatingLikeId");

                    b.HasIndex("StoreReviewId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreReviewFeedbacks");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreSalesAlert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreSalesAlerts");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("TagValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreTags");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PercentageOrAmount")
                        .HasColumnType("bit");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float");

                    b.Property<string>("TaxName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<double?>("TaxRatePercentage")
                        .HasColumnType("float");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("StoreTaxes");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreZipCodeMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ZipCodeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("StoreZipCodeMaps");
                });

            modelBuilder.Entity("SoftGrid.Shop.WishList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("SoftGrid.Storage.BinaryObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Bytes")
                        .HasMaxLength(10240)
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AppBinaryObjects");
                });

            modelBuilder.Entity("SoftGrid.TaskManagement.TaskEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActualTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EstimatedTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HourAndMinutes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("Priority")
                        .HasColumnType("bit");

                    b.Property<string>("StartTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long?>("TaskStatusId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Template")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TenantId");

                    b.ToTable("TaskEvents");
                });

            modelBuilder.Entity("SoftGrid.TaskManagement.TaskStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TaskStatuses");
                });

            modelBuilder.Entity("SoftGrid.TaskManagement.TaskTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomTag")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("MasterTagCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterTagId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sequence")
                        .HasColumnType("int");

                    b.Property<string>("TagValue")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("TaskEventId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<bool>("Verfied")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MasterTagCategoryId");

                    b.HasIndex("MasterTagId");

                    b.HasIndex("TaskEventId");

                    b.HasIndex("TenantId");

                    b.ToTable("TaskTags");
                });

            modelBuilder.Entity("SoftGrid.Territory.Hub", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CountyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeleterUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<int?>("EstimatedPopulation")
                        .HasColumnType("int");

                    b.Property<bool>("HasParentHub")
                        .HasColumnType("bit");

                    b.Property<long>("HubTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifierUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Live")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("OfficeFullAddress")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<long?>("ParentHubId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PartnerOrOwned")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("PictureMediaLibraryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("YearlyRevenue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountyId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HubTypeId");

                    b.HasIndex("PictureMediaLibraryId");

                    b.HasIndex("StateId");

                    b.HasIndex("TenantId");

                    b.ToTable("Hubs");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubAccountTeam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<bool>("PrimaryManager")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("HubId");

                    b.HasIndex("TenantId");

                    b.HasIndex("UserId");

                    b.ToTable("HubAccountTeams");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubBusiness", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusinessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplayScore")
                        .HasColumnType("int");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("HubId");

                    b.HasIndex("TenantId");

                    b.ToTable("HubBusinesses");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplayScore")
                        .HasColumnType("int");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("HubId");

                    b.HasIndex("TenantId");

                    b.ToTable("HubContacts");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubNavigationMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterNavigationMenuId")
                        .HasColumnType("bigint");

                    b.Property<string>("NavigationLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("MasterNavigationMenuId");

                    b.HasIndex("TenantId");

                    b.ToTable("HubNavigationMenus");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplayScore")
                        .HasColumnType("int");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TenantId");

                    b.ToTable("HubProducts");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplayScore")
                        .HasColumnType("int");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("TenantId");

                    b.ToTable("HubProductCategories");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubSalesProjection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double?>("ActualSalesAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DurationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("ExpectedSalesAmount")
                        .HasColumnType("float");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HubId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("HubSalesProjections");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubStore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DisplaySequence")
                        .HasColumnType("int");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<long>("StoreId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HubId");

                    b.HasIndex("StoreId");

                    b.HasIndex("TenantId");

                    b.ToTable("HubStores");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubZipCodeMap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CityName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("HubId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ZipCodeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("HubId");

                    b.HasIndex("TenantId");

                    b.HasIndex("ZipCodeId");

                    b.ToTable("HubZipCodeMaps");
                });

            modelBuilder.Entity("SoftGrid.Territory.MasterNavigationMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatorUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasParentMenu")
                        .HasColumnType("bit");

                    b.Property<Guid>("IconLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MediaLink")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("ParentMenuId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("MasterNavigationMenus");
                });

            modelBuilder.Entity("SoftGrid.Editions.SubscribableEdition", b =>
                {
                    b.HasBaseType("Abp.Application.Editions.Edition");

                    b.Property<decimal?>("AnnualPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DailyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ExpiringEditionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TrialDayCount")
                        .HasColumnType("int");

                    b.Property<int?>("WaitingDayAfterExpire")
                        .HasColumnType("int");

                    b.Property<decimal?>("WeeklyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("AbpEditions");

                    b.HasDiscriminator().HasValue("SubscribableEdition");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Roles.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", null)
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityProperty", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany()
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicEntityPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicEntityProperty", "DynamicEntityProperty")
                        .WithMany()
                        .HasForeignKey("DynamicEntityPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicEntityProperty");
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicPropertyValue", b =>
                {
                    b.HasOne("Abp.DynamicEntityProperties.DynamicProperty", "DynamicProperty")
                        .WithMany("DynamicPropertyValues")
                        .HasForeignKey("DynamicPropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DynamicProperty");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Abp.Webhooks.WebhookSendAttempt", b =>
                {
                    b.HasOne("Abp.Webhooks.WebhookEvent", "WebhookEvent")
                        .WithMany()
                        .HasForeignKey("WebhookEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WebhookEvent");
                });

            modelBuilder.Entity("SoftGrid.Authorization.Roles.Role", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("SoftGrid.Authorization.Users.User", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("PrimaryHubId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("HubFk");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("SoftGrid.CRM.Business", b =>
                {
                    b.HasOne("SoftGrid.LookupData.City", "CityFk")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "LogoMediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("LogoMediaLibraryId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CityFk");

                    b.Navigation("CountryFk");

                    b.Navigation("LogoMediaLibraryFk");

                    b.Navigation("StateFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessAccountTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("EmployeeFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessContactMap", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("ContactFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessJobMap", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.JobManagement.Job", "JobFk")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("JobFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessNote", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessProductMap", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessStoreMap", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessTag", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.Navigation("BusinessFk");

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessTaskMap", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.TaskManagement.TaskEvent", "TaskEventFk")
                        .WithMany()
                        .HasForeignKey("TaskEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("TaskEventFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.BusinessUser", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.Contact", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.MembershipType", "MembershipTypeFk")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "ReferredByUserFk")
                        .WithMany()
                        .HasForeignKey("ReferredByUserId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CountryFk");

                    b.Navigation("MembershipTypeFk");

                    b.Navigation("ReferredByUserFk");

                    b.Navigation("StateFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.ContactTag", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.Navigation("ContactFk");

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.Employee", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("ContactFk");

                    b.Navigation("CountryFk");

                    b.Navigation("StateFk");
                });

            modelBuilder.Entity("SoftGrid.CRM.EmployeeTag", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.Navigation("EmployeeFk");

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.CustomerWallet", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ContactFk");

                    b.Navigation("CurrencyFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.DiscountCodeByCustomer", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.DiscountManagement.DiscountCodeGenerator", "DiscountCodeGeneratorFk")
                        .WithMany()
                        .HasForeignKey("DiscountCodeGeneratorId");

                    b.Navigation("ContactFk");

                    b.Navigation("DiscountCodeGeneratorFk");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.DiscountCodeMap", b =>
                {
                    b.HasOne("SoftGrid.DiscountManagement.DiscountCodeGenerator", "DiscountCodeGeneratorFk")
                        .WithMany()
                        .HasForeignKey("DiscountCodeGeneratorId");

                    b.HasOne("SoftGrid.LookupData.MembershipType", "MembershipTypeFk")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("DiscountCodeGeneratorFk");

                    b.Navigation("MembershipTypeFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.DiscountManagement.DiscountCodeUserHistory", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.DiscountManagement.DiscountCodeGenerator", "DiscountCodeGeneratorFk")
                        .WithMany()
                        .HasForeignKey("DiscountCodeGeneratorId");

                    b.HasOne("SoftGrid.OrderManagement.Order", "OrderFk")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("ContactFk");

                    b.Navigation("DiscountCodeGeneratorFk");

                    b.Navigation("OrderFk");
                });

            modelBuilder.Entity("SoftGrid.JobManagement.Job", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId");

                    b.HasOne("SoftGrid.LookupData.City", "CityFk")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.JobManagement.JobStatusType", "JobStatusTypeFk")
                        .WithMany()
                        .HasForeignKey("JobStatusTypeId");

                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("BusinessFk");

                    b.Navigation("CityFk");

                    b.Navigation("CountryFk");

                    b.Navigation("CurrencyFk");

                    b.Navigation("JobStatusTypeFk");

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");

                    b.Navigation("ProductCategoryFk");

                    b.Navigation("StateFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.JobManagement.JobTag", b =>
                {
                    b.HasOne("SoftGrid.JobManagement.Job", "JobFk")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.Navigation("JobFk");

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");
                });

            modelBuilder.Entity("SoftGrid.LookupData.City", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.County", "CountyFk")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CountryFk");

                    b.Navigation("CountyFk");

                    b.Navigation("StateFk");
                });

            modelBuilder.Entity("SoftGrid.LookupData.County", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CountryFk");

                    b.Navigation("StateFk");
                });

            modelBuilder.Entity("SoftGrid.LookupData.MasterTag", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "PictureMediaLibraryFk")
                        .WithOne()
                        .HasForeignKey("SoftGrid.LookupData.MasterTag", "PictureMediaLibraryId");

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("PictureMediaLibraryFk");
                });

            modelBuilder.Entity("SoftGrid.LookupData.MasterTagCategory", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "PictureMediaLibraryFk")
                        .WithOne()
                        .HasForeignKey("SoftGrid.LookupData.MasterTagCategory", "PictureMediaLibraryId");

                    b.Navigation("PictureMediaLibraryFk");
                });

            modelBuilder.Entity("SoftGrid.LookupData.MediaLibrary", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");
                });

            modelBuilder.Entity("SoftGrid.LookupData.State", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryFk");
                });

            modelBuilder.Entity("SoftGrid.LookupData.ZipCode", b =>
                {
                    b.HasOne("SoftGrid.LookupData.City", "CityFk")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.County", "CountyFk")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CityFk");

                    b.Navigation("CountryFk");

                    b.Navigation("CountyFk");

                    b.Navigation("StateFk");
                });

            modelBuilder.Entity("SoftGrid.MultiTenancy.Payments.SubscriptionPayment", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("SoftGrid.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");

                    b.Navigation("CreatorUser");

                    b.Navigation("DeleterUser");

                    b.Navigation("Edition");

                    b.Navigation("LastModifierUser");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.Order", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.OrderManagement.OrderSalesChannel", "OrderSalesChannelFk")
                        .WithMany()
                        .HasForeignKey("OrderSalesChannelId");

                    b.HasOne("SoftGrid.OrderManagement.OrderStatus", "OrderStatusFk")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("ContactFk");

                    b.Navigation("CountryFk");

                    b.Navigation("CurrencyFk");

                    b.Navigation("OrderSalesChannelFk");

                    b.Navigation("OrderStatusFk");

                    b.Navigation("StateFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderDeliveryInfo", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.OrderManagement.Order", "OrderFk")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("EmployeeFk");

                    b.Navigation("OrderFk");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderFulfillmentStatus", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.OrderManagement.Order", "OrderFk")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("SoftGrid.OrderManagement.OrderStatus", "OrderStatusFk")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.Navigation("EmployeeFk");

                    b.Navigation("OrderFk");

                    b.Navigation("OrderStatusFk");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderPaymentInfo", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.OrderManagement.Order", "OrderFk")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("SoftGrid.LookupData.PaymentType", "PaymentTypeFk")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId");

                    b.Navigation("CurrencyFk");

                    b.Navigation("OrderFk");

                    b.Navigation("PaymentTypeFk");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderProductInfo", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MeasurementUnit", "MeasurementUnitFk")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("SoftGrid.OrderManagement.Order", "OrderFk")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("MeasurementUnitFk");

                    b.Navigation("OrderFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderProductVariant", b =>
                {
                    b.HasOne("SoftGrid.Shop.ProductVariantCategory", "ProductVariantCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductVariantCategoryId");

                    b.HasOne("SoftGrid.Shop.ProductVariant", "ProductVariantFk")
                        .WithMany()
                        .HasForeignKey("ProductVariantId");

                    b.Navigation("ProductVariantCategoryFk");

                    b.Navigation("ProductVariantFk");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderStatus", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Roles.Role", "RoleFk")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("RoleFk");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.OrderManagement.Order", "OrderFk")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("EmployeeFk");

                    b.Navigation("OrderFk");
                });

            modelBuilder.Entity("SoftGrid.OrderManagement.OrderfulfillmentTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.OrderManagement.Order", "OrderFk")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ContactFk");

                    b.Navigation("EmployeeFk");

                    b.Navigation("OrderFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.Lead", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId");

                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId");

                    b.HasOne("SoftGrid.SalesLeadManagement.LeadPipelineStage", "LeadPipelineStageFk")
                        .WithMany()
                        .HasForeignKey("LeadPipelineStageId");

                    b.HasOne("SoftGrid.SalesLeadManagement.LeadSource", "LeadSourceFk")
                        .WithMany()
                        .HasForeignKey("LeadSourceId");

                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("BusinessFk");

                    b.Navigation("ContactFk");

                    b.Navigation("EmployeeFk");

                    b.Navigation("HubFk");

                    b.Navigation("LeadPipelineStageFk");

                    b.Navigation("LeadSourceFk");

                    b.Navigation("ProductCategoryFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadContact", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.SalesLeadManagement.Lead", "LeadFk")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");

                    b.Navigation("LeadFk");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadNote", b =>
                {
                    b.HasOne("SoftGrid.SalesLeadManagement.Lead", "LeadFk")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.Navigation("LeadFk");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadPipelineStatus", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.SalesLeadManagement.Lead", "LeadFk")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.SalesLeadManagement.LeadPipelineStage", "LeadPipelineStageFk")
                        .WithMany()
                        .HasForeignKey("LeadPipelineStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeFk");

                    b.Navigation("LeadFk");

                    b.Navigation("LeadPipelineStageFk");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadReferralReward", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.SalesLeadManagement.Lead", "LeadFk")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");

                    b.Navigation("LeadFk");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadSalesTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.SalesLeadManagement.Lead", "LeadFk")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeFk");

                    b.Navigation("LeadFk");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadTag", b =>
                {
                    b.HasOne("SoftGrid.SalesLeadManagement.Lead", "LeadFk")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.Navigation("LeadFk");

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");
                });

            modelBuilder.Entity("SoftGrid.SalesLeadManagement.LeadTask", b =>
                {
                    b.HasOne("SoftGrid.SalesLeadManagement.Lead", "LeadFk")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.TaskManagement.TaskEvent", "TaskEventFk")
                        .WithMany()
                        .HasForeignKey("TaskEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeadFk");

                    b.Navigation("TaskEventFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.Product", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.LookupData.MeasurementUnit", "MeasurementUnitFk")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "MediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("MediaLibraryId");

                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.RatingLike", "RatingLikeFk")
                        .WithMany()
                        .HasForeignKey("RatingLikeId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("ContactFk");

                    b.Navigation("CurrencyFk");

                    b.Navigation("MeasurementUnitFk");

                    b.Navigation("MediaLibraryFk");

                    b.Navigation("ProductCategoryFk");

                    b.Navigation("RatingLikeFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductAccountTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeFk");

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductAndGiftCardMap", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyFk");

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductByVariant", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "MediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("MediaLibraryId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.ProductVariantCategory", "ProductVariantCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductVariantCategoryId");

                    b.HasOne("SoftGrid.Shop.ProductVariant", "ProductVariantFk")
                        .WithMany()
                        .HasForeignKey("ProductVariantId");

                    b.Navigation("MediaLibraryFk");

                    b.Navigation("ProductFk");

                    b.Navigation("ProductVariantCategoryFk");

                    b.Navigation("ProductVariantFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCategory", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "MediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("MediaLibraryId");

                    b.Navigation("MediaLibraryFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCategoryMap", b =>
                {
                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategoryFk");

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCategoryTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeFk");

                    b.Navigation("ProductCategoryFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCategoryVariantMap", b =>
                {
                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.ProductVariantCategory", "ProductVariantCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductVariantCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategoryFk");

                    b.Navigation("ProductVariantCategoryFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCrossSellProduct", b =>
                {
                    b.HasOne("SoftGrid.Shop.Product", "PrimaryProductFk")
                        .WithMany()
                        .HasForeignKey("PrimaryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCustomerQuery", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");

                    b.Navigation("EmployeeFk");

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductCustomerStat", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.LookupData.SocialMedia", "SocialMediaFk")
                        .WithMany()
                        .HasForeignKey("SocialMediaId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("ContactFk");

                    b.Navigation("HubFk");

                    b.Navigation("ProductFk");

                    b.Navigation("SocialMediaFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductFaq", b =>
                {
                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductFlashSaleProductMap", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MembershipType", "MembershipTypeFk")
                        .WithMany()
                        .HasForeignKey("MembershipTypeId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("MembershipTypeFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductMedia", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "MediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("MediaLibraryId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaLibraryFk");

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductNote", b =>
                {
                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductOwnerPublicContactInfo", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.HasOne("SoftGrid.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ContactFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductPackage", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "MediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("MediaLibraryId");

                    b.HasOne("SoftGrid.Shop.Product", "PrimaryProductFk")
                        .WithMany()
                        .HasForeignKey("PrimaryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaLibraryFk");

                    b.Navigation("PrimaryProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductReturnInfo", b =>
                {
                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.ReturnStatus", "ReturnStatusFk")
                        .WithMany()
                        .HasForeignKey("ReturnStatusId");

                    b.HasOne("SoftGrid.LookupData.ReturnType", "ReturnTypeFk")
                        .WithMany()
                        .HasForeignKey("ReturnTypeId");

                    b.Navigation("ProductFk");

                    b.Navigation("ReturnStatusFk");

                    b.Navigation("ReturnTypeFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductReview", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.RatingLike", "RatingLikeFk")
                        .WithMany()
                        .HasForeignKey("RatingLikeId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("ContactFk");

                    b.Navigation("ProductFk");

                    b.Navigation("RatingLikeFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductReviewFeedback", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.Shop.ProductReview", "ProductReviewFk")
                        .WithMany()
                        .HasForeignKey("ProductReviewId");

                    b.HasOne("SoftGrid.LookupData.RatingLike", "RatingLikeFk")
                        .WithMany()
                        .HasForeignKey("RatingLikeId");

                    b.Navigation("ContactFk");

                    b.Navigation("ProductReviewFk");

                    b.Navigation("RatingLikeFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductSubscriptionMap", b =>
                {
                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.LookupData.SubscriptionType", "SubscriptionTypeFk")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId");

                    b.Navigation("ProductFk");

                    b.Navigation("SubscriptionTypeFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductTag", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.StoreOwnerTeam", "StoreOwnerTeamFk")
                        .WithMany()
                        .HasForeignKey("StoreOwnerTeamId");

                    b.Navigation("EmployeeFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreOwnerTeamFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductUpsellRelatedProduct", b =>
                {
                    b.HasOne("SoftGrid.Shop.Product", "PrimaryProductFk")
                        .WithMany()
                        .HasForeignKey("PrimaryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryProductFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductVariant", b =>
                {
                    b.HasOne("SoftGrid.Shop.ProductVariantCategory", "ProductVariantCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductVariantCategoryId");

                    b.Navigation("ProductVariantCategoryFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductVariantCategory", b =>
                {
                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ProductWholeSalePrice", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.LookupData.MeasurementUnit", "MeasurementUnitFk")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.LookupData.ProductWholeSaleQuantityType", "ProductWholeSaleQuantityTypeFk")
                        .WithMany()
                        .HasForeignKey("ProductWholeSaleQuantityTypeId");

                    b.Navigation("CurrencyFk");

                    b.Navigation("MeasurementUnitFk");

                    b.Navigation("ProductFk");

                    b.Navigation("ProductWholeSaleQuantityTypeFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.ShoppingCart", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.OrderManagement.Order", "OrderFk")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("ContactFk");

                    b.Navigation("CurrencyFk");

                    b.Navigation("OrderFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.Store", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "LogoMediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("LogoMediaLibraryId");

                    b.HasOne("SoftGrid.LookupData.RatingLike", "RatingLikeFk")
                        .WithMany()
                        .HasForeignKey("RatingLikeId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "StoreCategoryFk")
                        .WithMany()
                        .HasForeignKey("StoreCategoryId");

                    b.Navigation("CountryFk");

                    b.Navigation("LogoMediaLibraryFk");

                    b.Navigation("RatingLikeFk");

                    b.Navigation("StateFk");

                    b.Navigation("StoreCategoryFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreAccountTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreBankAccount", b =>
                {
                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreBusinessCustomerMap", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreBusinessHour", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreContactMap", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreLocation", b =>
                {
                    b.HasOne("SoftGrid.LookupData.City", "CityFk")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityFk");

                    b.Navigation("CountryFk");

                    b.Navigation("StateFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreMarketplaceCommissionSetting", b =>
                {
                    b.HasOne("SoftGrid.Shop.MarketplaceCommissionType", "MarketplaceCommissionTypeFk")
                        .WithMany()
                        .HasForeignKey("MarketplaceCommissionTypeId");

                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarketplaceCommissionTypeFk");

                    b.Navigation("ProductCategoryFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreMedia", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "MediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("MediaLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaLibraryFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreNote", b =>
                {
                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreOwnerTeam", b =>
                {
                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreProductCategoryMap", b =>
                {
                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategoryFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreProductMap", b =>
                {
                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreRelevantStore", b =>
                {
                    b.HasOne("SoftGrid.Shop.Store", "PrimaryStoreFk")
                        .WithMany()
                        .HasForeignKey("PrimaryStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryStoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreReview", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.LookupData.RatingLike", "RatingLikeFk")
                        .WithMany()
                        .HasForeignKey("RatingLikeId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");

                    b.Navigation("RatingLikeFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreReviewFeedback", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("SoftGrid.LookupData.RatingLike", "RatingLikeFk")
                        .WithMany()
                        .HasForeignKey("RatingLikeId");

                    b.HasOne("SoftGrid.Shop.StoreReview", "StoreReviewFk")
                        .WithMany()
                        .HasForeignKey("StoreReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");

                    b.Navigation("RatingLikeFk");

                    b.Navigation("StoreReviewFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreSalesAlert", b =>
                {
                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreTag", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreTax", b =>
                {
                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.StoreZipCodeMap", b =>
                {
                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.ZipCode", "ZipCodeFk")
                        .WithMany()
                        .HasForeignKey("ZipCodeId");

                    b.Navigation("StoreFk");

                    b.Navigation("ZipCodeFk");
                });

            modelBuilder.Entity("SoftGrid.Shop.WishList", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("ContactFk");

                    b.Navigation("ProductFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.TaskManagement.TaskEvent", b =>
                {
                    b.HasOne("SoftGrid.TaskManagement.TaskStatus", "TaskStatusFk")
                        .WithMany()
                        .HasForeignKey("TaskStatusId");

                    b.Navigation("TaskStatusFk");
                });

            modelBuilder.Entity("SoftGrid.TaskManagement.TaskTag", b =>
                {
                    b.HasOne("SoftGrid.LookupData.MasterTagCategory", "MasterTagCategoryFk")
                        .WithMany()
                        .HasForeignKey("MasterTagCategoryId");

                    b.HasOne("SoftGrid.LookupData.MasterTag", "MasterTagFk")
                        .WithMany()
                        .HasForeignKey("MasterTagId");

                    b.HasOne("SoftGrid.TaskManagement.TaskEvent", "TaskEventFk")
                        .WithMany()
                        .HasForeignKey("TaskEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterTagCategoryFk");

                    b.Navigation("MasterTagFk");

                    b.Navigation("TaskEventFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.Hub", b =>
                {
                    b.HasOne("SoftGrid.LookupData.City", "CityFk")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SoftGrid.LookupData.Country", "CountryFk")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("SoftGrid.LookupData.County", "CountyFk")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.LookupData.HubType", "HubTypeFk")
                        .WithMany()
                        .HasForeignKey("HubTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.MediaLibrary", "PictureMediaLibraryFk")
                        .WithMany()
                        .HasForeignKey("PictureMediaLibraryId");

                    b.HasOne("SoftGrid.LookupData.State", "StateFk")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CityFk");

                    b.Navigation("CountryFk");

                    b.Navigation("CountyFk");

                    b.Navigation("CurrencyFk");

                    b.Navigation("HubTypeFk");

                    b.Navigation("PictureMediaLibraryFk");

                    b.Navigation("StateFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubAccountTeam", b =>
                {
                    b.HasOne("SoftGrid.CRM.Employee", "EmployeeFk")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Authorization.Users.User", "UserFk")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EmployeeFk");

                    b.Navigation("HubFk");

                    b.Navigation("UserFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubBusiness", b =>
                {
                    b.HasOne("SoftGrid.CRM.Business", "BusinessFk")
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessFk");

                    b.Navigation("HubFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubContact", b =>
                {
                    b.HasOne("SoftGrid.CRM.Contact", "ContactFk")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactFk");

                    b.Navigation("HubFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubNavigationMenu", b =>
                {
                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Territory.MasterNavigationMenu", "MasterNavigationMenuFk")
                        .WithMany()
                        .HasForeignKey("MasterNavigationMenuId");

                    b.Navigation("HubFk");

                    b.Navigation("MasterNavigationMenuFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubProduct", b =>
                {
                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Product", "ProductFk")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HubFk");

                    b.Navigation("ProductFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubProductCategory", b =>
                {
                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HubFk");

                    b.Navigation("ProductCategoryFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubSalesProjection", b =>
                {
                    b.HasOne("SoftGrid.LookupData.Currency", "CurrencyFk")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.ProductCategory", "ProductCategoryFk")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("CurrencyFk");

                    b.Navigation("HubFk");

                    b.Navigation("ProductCategoryFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubStore", b =>
                {
                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.Shop.Store", "StoreFk")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HubFk");

                    b.Navigation("StoreFk");
                });

            modelBuilder.Entity("SoftGrid.Territory.HubZipCodeMap", b =>
                {
                    b.HasOne("SoftGrid.LookupData.City", "CityFk")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SoftGrid.Territory.Hub", "HubFk")
                        .WithMany()
                        .HasForeignKey("HubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SoftGrid.LookupData.ZipCode", "ZipCodeFk")
                        .WithMany()
                        .HasForeignKey("ZipCodeId");

                    b.Navigation("CityFk");

                    b.Navigation("HubFk");

                    b.Navigation("ZipCodeFk");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Roles.Role", null)
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("SoftGrid.Authorization.Users.User", null)
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Abp.DynamicEntityProperties.DynamicProperty", b =>
                {
                    b.Navigation("DynamicPropertyValues");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("SoftGrid.Authorization.Roles.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("SoftGrid.Authorization.Users.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("OrganizationUnits");

                    b.Navigation("Permissions");

                    b.Navigation("Roles");

                    b.Navigation("Settings");

                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
